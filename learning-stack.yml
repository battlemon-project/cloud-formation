AWSTemplateFormatVersion: 2010-09-09


Description:
  this is template for learning purposes. will be change to production ready later


Parameters:
  StackAlias:
    Description: Alias of the stack
    Type: String
    Default: LearningStack

  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: CIDR block for the public subnet 1 in AZ1
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: CIDR block for the public subnet 2 in AZ2
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet1CIDR:
    Description: CIDR block for the private subnet 1 in AZ1
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
    Description: CIDR block for the private subnet 2 in AZ2
    Type: String
    Default: 10.0.3.0/24

  PrivateSubnet3CIDR:
    Description: CIDR block for the private subnet 3 in AZ1
    Type: String
    Default: 10.0.4.0/24

  PrivateSubnet4CIDR:
    Description: CIDR block for the private subnet 4 in AZ2
    Type: String
    Default: 10.0.5.0/24

  #  AcmCertificate:
  #    Description: The ARN of the AWS Certificate Manager (ACM) certificate to use for the load balancer
  #    Type: String

  GraphQLECRRepositoryURI:
    Description: GraphQL backend repository's URI of Amazon Container Registry
    Type: String
    Default: "941572822749.dkr.ecr.us-east-1.amazonaws.com/graphql-backend:1.0.0"

Resources:
  # Secrets
  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${StackAlias}RDSSecret
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        PasswordLength: 20
        ExcludeCharacters: '"@/\'
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}VPC

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: VPC
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  "" ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs  "" ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}PublicRoutes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  "" ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}PrivateSubnet1
        - Key: Tier
          Value: Backend

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs  "" ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}PrivateSubnet2
        - Key: Tier
          Value: Backend

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  "" ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}PrivateSubnet3
        - Key: Tier
          Value: Database

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs  "" ]
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet4CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}PrivateSubnet4
        - Key: Tier
          Value: Database

  # Security groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and HTTPS access on port 80/443
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}ALBSecurityGroup

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via ALB on port 8000
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}WebServerSecurityGroup

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable database access on port 5432 only from Private Subnets 2 and 3
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref PrivateSubnet2CIDR
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref PrivateSubnet3CIDR
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}DatabaseSecurityGroup

  # Nat gateways
  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: VPC

  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: VPC

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}NatGatewayPublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}NatGatewayPublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}PrivateRoutes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}PrivateRoutes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # Database
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref PrivateSubnet3
        - !Ref PrivateSubnet4
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}DatabaseSubnetGroup

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AvailabilityZone: !Select [ 0, !GetAZs  "" ]
      BackupRetentionPeriod: 0
      DBInstanceClass: db.m6i.large
      DBInstanceIdentifier: !Sub ${StackAlias}DatabaseInstance
      DBName: postgres
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      Engine: postgres
      EngineVersion: 15.2
      MasterUsername: !Sub '{{resolve:secretsmanager:${RDSSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${RDSSecret}:SecretString:password}}'
      MultiAZ: false
      Port: 5432
      PubliclyAccessible: false
      StorageEncrypted: false
      VPCSecurityGroups: [ !Ref DatabaseSecurityGroup ]

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${StackAlias}ALB
      SecurityGroups: [ !Ref ALBSecurityGroup ]
      Subnets: [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]

  ALBListenerNoSslCertificate:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: "443"
            Protocol: HTTPS
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # Implement it later when move domain to route53
  #  ALBListenerSslCertificate:
  #    Type: AWS::ElasticLoadBalancingV2::Listener
  #    Properties:
  #      Certificates:
  #        - CertificateArn: !Ref AcmCertificate
  #      DefaultActions:
  #        - Type: forward
  #          TargetGroupArn: !Ref ALBTargetGroup
  #      LoadBalancerArn: !Ref ApplicationLoadBalancer
  #      Port: 443
  #      Protocol: HTTPS

  #  ALBTargetGroup:
  #    Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #    Properties:
  #      HealthCheckIntervalSeconds: 10
  #      HealthCheckPath: /healthcheck
  #      HealthCheckTimeoutSeconds: 5
  #      HealthyThresholdCount: 2
  #      Matcher:
  #        HttpCode: "200,302"
  #      Name: !Sub ${StackAlias}WebServers
  #      Port: 80
  #      Protocol: HTTP
  #      TargetType:
  #
  #      UnhealthyThresholdCount: 5
  #      VpcId:
  #        !Ref VPC

  # Cluster
  BackendCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${StackAlias}BackendCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}GraphQLBackendCluster

  #  GraphQLBackendService:
  #    Type: AWS::ECS::Service
  #    Properties:
  #      ServiceName: !Sub ${StackAlias}GraphQLBackendService
  #      Cluster: !Ref GraphQLBackendCluster
  #      TaskDefinition: !Ref GraphQLBackendTaskDefinition
  #      DesiredCount: 1
  #      LaunchType: FARGATE
  #      NetworkConfiguration:
  #        AwsvpcConfiguration:
  #          AssignPublicIp: DISABLED
  #          Subnets: !Ref PrivateSubnets
  #          SecurityGroups: [ !Ref ServiceSecurityGroup ]
  #      LoadBalancers:
  #        - ContainerName: !Sub ${StackAlias}GraphQLBackend
  #          ContainerPort: 8000
  #          TargetGroupArn: !Ref ServiceTargetGroup
  #      Tags:
  #        - Key: Name
  #          Value: !Sub ${StackAlias}GraphQLBackendService

  # Task definitions
  GraphQLBackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${StackAlias}GraphQLBackend
      ContainerDefinitions:
        - Name: !Sub ${StackAlias}GraphQLBackend
          Image: !Ref GraphQLECRRepositoryURI
          Essential: true
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
          Cpu: 1 vCPU
          Memory: 1 GB
          Environment:
            - Name: APP_GRAPHQL__PLAYGROUND_ROUTE
              Value: /graphql/playground
            - Name: APP_APP__HOST
              Value: 127.0.0.1
            - Name: APP_DB__USERNAME
              Value: !Sub '{{resolve:secretsmanager:${RDSSecret}:SecretString:username}}'
            - Name: APP_DB__PASSWORD
              Value: !Sub '{{resolve:secretsmanager:${RDSSecret}:SecretString:password}}'
            - Name: APP_APP__PORT
              Value: '8000'
            - Name: APP_DB__HOST
              Value: !GetAtt DatabaseInstance.Endpoint.Address
            - Name: APP_DB__DB_NAME
              Value: postgres
            - Name: APP_DB__PORT
              Value: '5432'
      Tags:
        - Key: Name
          Value: !Sub ${StackAlias}GraphQLBackendTaskDefinition


